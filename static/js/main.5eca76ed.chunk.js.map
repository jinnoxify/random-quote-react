{"version":3,"sources":["components/Quote.js","App.js","serviceWorker.js","index.js"],"names":["Quote","props","getRandomNumber","quotes","state","length","randomNumber","Math","floor","random","setState","index","fetch","then","response","json","this","quote","className","id","author","onClick","href","target","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oPAkFeA,E,kDA7Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,gBAAkB,WAAO,IACfC,EAAW,EAAKC,MAAhBD,OACR,GAAIA,EAAOE,OAAS,EAAG,CACrB,IAAIC,EAAeC,KAAKC,MAAMD,KAAKE,SAAWN,EAAOE,QACrD,EAAKK,SAAS,CACZC,MAAOL,MAvBX,EAAKF,MAAQ,CACXD,OAAQ,GACRQ,MAAO,GALQ,E,gEAQE,IAAD,OAClBC,MAZF,0IAaKC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACC,GACL,EAAKJ,SACH,CACEP,OAAQW,EAASX,QAEnB,EAAKD,sB,+BAeH,IAAD,EACmBc,KAAKZ,MACzBa,EAFC,EACCd,OADD,EACSQ,OAEhB,OACE,yBAAKO,UAAU,wBAAwBC,GAAG,aACxC,yBAAKD,UAAU,cAAcC,GAAG,QAC9B,uBAAGD,UAAU,sBACZD,GACC,6BACG,IACD,2BAAIA,EAAMA,OAAW,IACrB,0BAAMC,UAAU,aAAaC,GAAG,UAC7BF,EAAMG,UAKf,yBAAKF,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,4BACEA,UAAU,kBACVC,GAAG,YACHE,QAASL,KAAKd,iBAEd,uBAAGgB,UAAU,kBALf,eAQF,yBAAKA,UAAU,YACb,uBACEI,KAAK,2BACLC,OAAO,SACPJ,GAAG,eAEH,4BAAQD,UAAU,mBAChB,uBAAGA,UAAU,mBADf,yB,GAlEIM,aCQLC,MARf,WACE,OACE,yBAAKP,UAAU,4DACb,kBAAC,EAAD,QCKcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5eca76ed.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nconst QuotesStore =\r\n  \"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\";\r\n\r\nclass Quote extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      quotes: [],\r\n      index: 0,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    fetch(QuotesStore)\r\n      .then((response) => response.json())\r\n      .then((response) => {\r\n        this.setState(\r\n          {\r\n            quotes: response.quotes,\r\n          },\r\n          this.getRandomNumber\r\n        );\r\n      });\r\n  }\r\n\r\n  getRandomNumber = () => {\r\n    const { quotes } = this.state;\r\n    if (quotes.length > 1) {\r\n      var randomNumber = Math.floor(Math.random() * quotes.length);\r\n      this.setState({\r\n        index: randomNumber,\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { quotes, index } = this.state;\r\n    const quote = quotes[index];\r\n    return (\r\n      <div className=\"col-6 box p-4 rounded\" id=\"quote-box\">\r\n        <div className=\"text-center\" id=\"text\">\r\n          <i className=\"fas fa-quote-left\"></i>\r\n          {quote && (\r\n            <div>\r\n              {\" \"}\r\n              <p>{quote.quote}</p>{\" \"}\r\n              <cite className=\"text-right\" id=\"author\">\r\n                {quote.author}\r\n              </cite>\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-10\">\r\n              <button\r\n                className=\"btn btn-primary\"\r\n                id=\"new-quote\"\r\n                onClick={this.getRandomNumber}\r\n              >\r\n                <i className=\"fas fa-random\"></i> Get quote\r\n              </button>\r\n            </div>\r\n            <div className=\"col-sm-2\">\r\n              <a\r\n                href=\"twitter.com/intent/tweet\"\r\n                target=\"_blank\"\r\n                id=\"tweet-quote\"\r\n              >\r\n                <button className=\"btn btn-primary\">\r\n                  <i className=\"fab fa-twitter\"></i> Tweet quote\r\n                </button>\r\n              </a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Quote from \"./components/Quote\";\n\nfunction App() {\n  return (\n    <div className=\"wrapper d-flex align-items-center justify-content-center\">\n      <Quote />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}